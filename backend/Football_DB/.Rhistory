# BbMxH = Betbrain maximum home win odds
# BbAvH = Betbrain average home win odds
# BbMxD = Betbrain maximum draw odds
# BbAvD = Betbrain average draw win odds
# BbMxA = Betbrain maximum away win odds
# BbAvA = Betbrain average away win odds
#
# MaxH = Market maximum home win odds
# MaxD = Market maximum draw win odds
# MaxA = Market maximum away win odds
# AvgH = Market average home win odds
# AvgD = Market average draw win odds
# AvgA = Market average away win odds
#
#
#
# Key to total goals betting odds:
#
#   BbOU = Number of BetBrain bookmakers used to calculate over/under 2.5 goals (total goals) averages and maximums
# BbMx>2.5 = Betbrain maximum over 2.5 goals
# BbAv>2.5 = Betbrain average over 2.5 goals
# BbMx<2.5 = Betbrain maximum under 2.5 goals
# BbAv<2.5 = Betbrain average under 2.5 goals
#
# GB>2.5 = Gamebookers over 2.5 goals
# GB<2.5 = Gamebookers under 2.5 goals
# B365>2.5 = Bet365 over 2.5 goals
# B365<2.5 = Bet365 under 2.5 goals
# P>2.5 = Pinnacle over 2.5 goals
# P<2.5 = Pinnacle under 2.5 goals
# Max>2.5 = Market maximum over 2.5 goals
# Max<2.5 = Market maximum under 2.5 goals
# Avg>2.5 = Market average over 2.5 goals
# Avg<2.5 = Market average under 2.5 goals
#
#
#
# Key to Asian handicap betting odds:
#
# BbAH = Number of BetBrain bookmakers used to Asian handicap averages and maximums
# BbAHh = Betbrain size of handicap (home team)
# AHh = Market size of handicap (home team) (since 2019/2020)
# BbMxAHH = Betbrain maximum Asian handicap home team odds
# BbAvAHH = Betbrain average Asian handicap home team odds
# BbMxAHA = Betbrain maximum Asian handicap away team odds
# BbAvAHA = Betbrain average Asian handicap away team odds
#
# GBAHH = Gamebookers Asian handicap home team odds
# GBAHA = Gamebookers Asian handicap away team odds
# GBAH = Gamebookers size of handicap (home team)
# LBAHH = Ladbrokes Asian handicap home team odds
# LBAHA = Ladbrokes Asian handicap away team odds
# LBAH = Ladbrokes size of handicap (home team)
# B365AHH = Bet365 Asian handicap home team odds
# B365AHA = Bet365 Asian handicap away team odds
# B365AH = Bet365 size of handicap (home team)
# PAHH = Pinnacle Asian handicap home team odds
# PAHA = Pinnacle Asian handicap away team odds
# MaxAHH = Market maximum Asian handicap home team odds
# MaxAHA = Market maximum Asian handicap away team odds
# AvgAHH = Market average Asian handicap home team odds
# AvgAHA = Market average Asian handicap away team odds
############
n <- 0
list_20192020 <- list()
for (c in newchpship) {
n <- n + 1
newname <- paste0(c, "_20192020")
tempname <- paste0("df", n)
newname <- get(newname)
list_20192020[[tempname]] <- newname
}
list_20192020 <- lapply(list_20192020, function(df) { select(df, -Time) })
n <- 0
for (c in newchpship) {
n <- n + 1
newname <- paste0(c, "_20192020")
tempname <- paste0("df", n)
assign(newname, as.data.frame(list_20192020[[tempname]]))
}
list_season <- c()
n <- 0
for (c in newchpship) {
for (y in years) {
n <- n + 1
newname <- paste0(c, "_", y)
tempname <- paste0("df", n)
newname <- get(newname)
if ("Referee" %in% colnames(newname)) {
newname["Referee"] <- NULL
}
list_season[[tempname]] <- newname
}
}
list_season <- lapply(list_season, function(df) {
df <- df[,c(1:24)]
})
n <- 0
for (c in newchpship) {
for (y in years) {
n <- n + 1
newname <- paste0(c, "_", y)
tempname <- paste0("df", n)
assign(newname, as.data.frame(list_season[[tempname]]))
}
}
n <- 0
seasons <- c()
for (c in newchpship) {
for (y in years) {
n <- n + 1
newname <- paste0(c, "_", y)
seasons[n] <- newname
}
}
ResultsDB <- data.frame(get(seasons[1]))
for(d in seasons[-1]){
ResultsDB <- rbind(ResultsDB, get(d))
}
ResultsDB$Date <- as.Date(ResultsDB$Date, format = '%d/%m/%Y')
ResultsDB$Season <- NA
ResultsDB$Season[as.character(ResultsDB$Date) > "2015-07-01" & as.character(ResultsDB$Date) < "2016-06-31"] <- "20152016"
ResultsDB$Season[as.character(ResultsDB$Date) > "2016-07-01" & as.character(ResultsDB$Date) < "2017-06-31"] <- "20162017"
ResultsDB$Season[as.character(ResultsDB$Date) > "2017-07-01" & as.character(ResultsDB$Date) < "2018-06-31"] <- "20172018"
ResultsDB$Season[as.character(ResultsDB$Date) > "2018-07-01" & as.character(ResultsDB$Date) < "2019-06-31"] <- "20182019"
ResultsDB$Season[as.character(ResultsDB$Date) > "2019-07-01" & as.character(ResultsDB$Date) < "2020-06-31"] <- "20192020"
Bun1_Ranking <- read.csv("Bun1Ranking.csv", sep = ";")
Bun1_Ranking$Div <- "D1"
Ch_Ranking <- read.csv("ChRanking.csv", sep = ";")
Ch_Ranking$Div <- "E1"
L1_Ranking <- read.csv("L1Ranking.csv", sep = ";")
L1_Ranking$Div <- "F1"
Liga_Ranking <- read.csv("LigaRanking.csv", sep = ";")
Liga_Ranking$Div <- "SP1"
PL_Ranking <- read.csv("PLRanking.csv", sep = ";")
PL_Ranking$Div <- "E0"
SerieA_Ranking <- read.csv("SerieARanking.csv", sep = ";")
SerieA_Ranking$Div <- "I1"
RankingDB <- rbind.data.frame(Bun1_Ranking, Ch_Ranking, PL_Ranking, L1_Ranking, Liga_Ranking, SerieA_Ranking)
RankingDB$Season <- as.character(RankingDB$Season)
ResultsDB$HomeTeam <- as.character(ResultsDB$HomeTeam)
ResultsDB$AwayTeam <- as.character(ResultsDB$AwayTeam)
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Wolves"] <- "Wolverhampton"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Wolves"] <- "Wolverhampton"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Cardiff"] <- "Cardiff City"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Cardiff"] <- "Cardiff City"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Birmingham"] <- "Birmingham City"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Birmingham"] <- "Birmingham City"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Sheffield Weds"] <- "Sheffield Wednesday"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Sheffield Weds"] <- "Sheffield Wednesday"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Derby"] <- "Derby County"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Derby"] <- "Derby County"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Nott'm Forest"] <- "Nottingham"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Nott'm Forest"] <- "Nottingham"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Burton"] <- "Burton Albion"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Burton"] <- "Burton Albion"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Ajaccio GFCO"] <- "GFC Ajaccio"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Ajaccio GFCO"] <- "GFC Ajaccio"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Espanol"] <- "Esp Barcelona"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Espanol"] <- "Esp Barcelona"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Sp Gijon"] <- "Girona"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Sp Gijon"] <- "Girona"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Vallecano"] <- "Rayo Vallecano"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Vallecano"] <- "Rayo Vallecano"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Sociedad"] <- "Real Sociedad"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Sociedad"] <- "Real Sociedad"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Verona"] <- "Hellas Verona"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Verona"] <- "Hellas Verona"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Inter"] <- "Inter Milan"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Inter"] <- "Inter Milan"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Milan"] <- "AC Milan"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Milan"] <- "AC Milan"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Chievo"] <- "Chievo Verona"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Chievo"] <- "Chievo Verona"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Spal"] <- "SPAL"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Spal"] <- "SPAL"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "RB Leipzig"] <- "Leipzig"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "RB Leipzig"] <- "Leipzig"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Celta"] <- "Celta Vigo"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Celta"] <- "Celta Vigo"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "Betis"] <- "Betis Sevilla"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "Betis"] <- "Betis Sevilla"
ResultsDB$HomeTeam[ResultsDB$HomeTeam == "West Brom"] <- "West Bromwich"
ResultsDB$AwayTeam[ResultsDB$AwayTeam == "West Brom"] <- "West Bromwich"
RankingDB$Team <- as.character(RankingDB$Team)
RankingDB$Team[RankingDB$Team == "Munich"] <- "Bayern Munich"
RankingDB$Team[RankingDB$Team == "Mayence"] <- "Mainz"
RankingDB$Team[RankingDB$Team == "Berlin"] <- "Hertha"
RankingDB$Team[RankingDB$Team == "Wolfsbourg"] <- "Wolfsburg"
RankingDB$Team[RankingDB$Team == "Cologne"] <- "FC Koln"
RankingDB$Team[RankingDB$Team == "Hambourg"] <- "Hamburg"
RankingDB$Team[RankingDB$Team == "Augsbourg"] <- "Augsburg"
RankingDB$Team[RankingDB$Team == "Brême"] <- "Werder Bremen"
RankingDB$Team[RankingDB$Team == "Francfort"] <- "Ein Frankfurt"
RankingDB$Team[RankingDB$Team == "Hanovre"] <- "Hannover"
RankingDB$Team[RankingDB$Team == "Fribourg"] <- "Freiburg"
RankingDB$Team[RankingDB$Team == "M'Gladbach"] <- "M'gladbach"
RankingDB$Team[RankingDB$Team == "Düsseldorf"] <- "Fortuna Dusseldorf"
RankingDB$Team[RankingDB$Team == "Nuremberg"] <- "Nurnberg"
RankingDB$Team[RankingDB$Team == "Hertha BSC"] <- "Hertha"
RankingDB$Team[RankingDB$Team == "Un. Berlin"] <- "Union Berlin"
RankingDB$Team[RankingDB$Team == "Ipswich Town"] <- "Ipswich"
RankingDB$Team[RankingDB$Team == "Milton KD"] <- "Milton Keynes Dons"
RankingDB$Team[RankingDB$Team == "Saint-Étienne"] <- "St Etienne"
RankingDB$Team[RankingDB$Team == "St-Étienne"] <- "St Etienne"
RankingDB$Team[RankingDB$Team == "Málaga CF"] <- "Malaga"
RankingDB$Team[RankingDB$Team == "Espanyol Barcelone"] <- "Esp Barcelona"
RankingDB$Team[RankingDB$Team == "Deportivo La Corogne"] <- "La Coruna"
RankingDB$Team[RankingDB$Team == "D. La Corogne"] <- "La Coruna"
RankingDB$Team[RankingDB$Team == "At. Madrid"] <- "Ath Madrid"
RankingDB$Team[RankingDB$Team == "La Corogne"] <- "La Coruna"
RankingDB$Team[RankingDB$Team == "Málaga"] <- "Malaga"
RankingDB$Team[RankingDB$Team == "Man. City"] <- "Man City"
RankingDB$Team[RankingDB$Team == "Man. United"] <- "Man United"
RankingDB$Team[RankingDB$Team == "Bologne FC"] <- "Bologna"
RankingDB$Team[RankingDB$Team == "Carpi FC"] <- "Carpi"
RankingDB$Team[RankingDB$Team == "Chievo Vérone"] <- "Chievo Verona"
RankingDB$Team[RankingDB$Team == "Empoli FC"] <- "Empoli"
RankingDB$Team[RankingDB$Team == "Genoa CFC"] <- "Genoa"
RankingDB$Team[RankingDB$Team == "Hellas Vérone"] <- "Hellas Verona"
RankingDB$Team[RankingDB$Team == "SS Lazio"] <- "Lazio"
RankingDB$Team[RankingDB$Team == "SSC Naples"] <- "Napoli"
RankingDB$Team[RankingDB$Team == "US Palerme"] <- "Palermo"
RankingDB$Team[RankingDB$Team == "AS Rome"] <- "Roma"
RankingDB$Team[RankingDB$Team == "US Sassuolo"] <- "Sassuolo"
RankingDB$Team[RankingDB$Team == "Cagliari Calcio"] <- "Cagliari"
RankingDB$Team[RankingDB$Team == "Crotone FC"] <- "Crotone"
RankingDB$Team[RankingDB$Team == "Bénévent Calcio"] <- "Benevento"
RankingDB$Team[RankingDB$Team == "Torino FC"] <- "Torino"
RankingDB$Team[RankingDB$Team == "Parme"] <- "Parma"
RankingDB$Team[RankingDB$Team == "US Lecce"] <- "Lecce"
RankingDB$Team[RankingDB$Team == "Parme Calcio"] <- "Parma"
RankingDB$Team[RankingDB$Team == "Schalke"] <- "Schalke 04"
RankingDB$Team[RankingDB$Team == "Nîmes"] <- "Nimes"
RankingDB$Team[RankingDB$Team == "Paris"] <- "Paris SG"
RankingDB$Team[RankingDB$Team == "Leicester City"] <- "Leicester"
RankingDB$Team[RankingDB$Team == "Huddersfield Town"] <- "Huddersfield"
RankingDB$Team[RankingDB$Team == "ACF Fiorentina"] <- "Fiorentina"
RankingDB$Team[RankingDB$Team == "Atalanta Bergame"] <- "Atalanta"
RankingDB$Team[RankingDB$Team == "Udinese Calcio"] <- "Udinese"
RankingDB$Team[RankingDB$Team == "Juventus FC"] <- "Juventus"
RankingDB$Team[RankingDB$Team == "UC Sampdoria"] <- "Sampdoria"
RankingDB$Team[RankingDB$Team == "Frosinone Calcio"] <- "Frosinone"
RankingDB$Team[RankingDB$Team == "AC Fiorentina"] <- "Fiorentina"
RankingDB$Team[RankingDB$Team == "Rayo"] <- "Rayo Vallecano"
RankingDB$Team[RankingDB$Team == "Celta"] <- "Celta Vigo"
RankingDB$Team[RankingDB$Team == "Levante UD"] <- "Levante"
### Test differences between teams in both DB
# setdiff(DATABASE$HomeTeam, RankingDB$Team)
# setdiff(RankingDB$Team, DATABASE$HomeTeam)
names(RankingDB)[names(RankingDB) == 'Team'] <- 'HomeTeam'
names(RankingDB)[names(RankingDB) == 'Matchday'] <- 'MD_when_played'
CleanDB <- merge(ResultsDB, RankingDB, by=c("Div", "HomeTeam", "Season", "MD_when_played"), all.x = T)
names(CleanDB)[names(CleanDB) == "Ranking"] <- "HomeTeamRank"
names(RankingDB)[names(RankingDB) == 'HomeTeam'] <- 'AwayTeam'
CleanDB <- merge(CleanDB, RankingDB, by=c("Div", "AwayTeam", "Season", "MD_when_played"), all.x = T)
names(CleanDB)[names(CleanDB) == "Ranking"] <- "AwayTeamRank"
names(RankingDB)[names(RankingDB) == 'AwayTeam'] <- 'Team'
names(RankingDB)[names(RankingDB) == 'MD_when_played'] <- 'Matchday'
#Reorder columns order:
CleanDB <- CleanDB[c("Div", "Season", "Matchday", "MD_when_played", "Date", "HomeTeam", "AwayTeam",
"FTHG", "FTAG", "FTR", "HTHG", "HTAG", "HTR", "HomeTeamRank", "AwayTeamRank",
"HS", "AS", "HST", "AST", "HF", "AF", "HC", "AC", "HY", "AY", "HR", "AR")]
CleanDB$Div <- as.character(CleanDB$Div)
#write.table(CleanDB, "./CleanDB.csv", sep = ",", row.names = F)
# Source the script computeRanking.R containing the function to compute ranking from specific F
# Football result database
source("./computeRanking.R")
Computed_Ranking <- ComputeRanking(CleanDB, TRUE)
Computed_Ranking[, c("MD_when_played", "GF", "GA")] <- list(NULL)
FootballDB <- merge(x = CleanDB, y = Computed_Ranking, by.x = c("Div", "Season", "Date", "HomeTeam", "Matchday"),
by.y = c("Div", "Season", "Date", "Team", "Matchday"), all.x = TRUE)
FootballDB <- FootballDB %>% rename(OutcomeH = Outcome, PointsH = Points, PlayedH = Played, WinsH = Wins,
DrawsH = Draws, LossesH = Losses, Goals_scoredH = Goals_scored,
Goals_againstH = Goals_against, Goal_avgH = Goal_avg, rankingH = ranking)
FootballDB <- merge(x = FootballDB, y = Computed_Ranking, by.x = c("Div", "Season", "Date", "AwayTeam", "Matchday"),
by.y = c("Div", "Season", "Date", "Team", "Matchday"), all.x = TRUE)
FootballDB <- FootballDB %>% rename(OutcomeA = Outcome, PointsA = Points, PlayedA = Played, WinsA = Wins,
DrawsA = Draws, LossesA = Losses, Goals_scoredA = Goals_scored,
Goals_againstA = Goals_against, Goal_avgA = Goal_avg, rankingA = ranking)
View(FootballDB)
FootballDB %>% summarise(avg = mean(HST))
FootballDB$HST
class(FootballDB$HST)
FootballDB %>% summarise(avg = mean(HST, na.rm = TRUE))
FootballDB %>% mutate(avg = mean(HST, na.rm = TRUE))
?mutate
FootballDB %>% group_by(Season, Div, HomeTeam)
FootballDB %>% group_by(Season, Div, HomeTeam) %>% mutate(avg = mean(HST, na.rm = TRUE))
FootballDB %>% filter(Div, Season, Date, AwayTeam, HST) %>%
group_by(Season, Div, HomeTeam) %>%
mutate(avg = mean(HST, na.rm = TRUE))
?filter
FootballDB %>% select(Div, Season, Date, AwayTeam, HST) %>%
group_by(Season, Div, HomeTeam) %>%
mutate(avg = mean(HST, na.rm = TRUE))
FootballDB %>% select(Div, Season, Date, AwayTeam, HST) %>%
group_by(Season, Div, AwayTeam) %>%
mutate(avg = mean(HST, na.rm = TRUE))
FootballDB %>% select(Div, Season, Date, AwayTeam, HST) %>%
#group_by(Season, Div, AwayTeam) %>%
mutate(avg = mean(HST, na.rm = TRUE))
FootballDB %>% select(Div, Season, Date, AwayTeam, HST) %>%
group_by(Season) %>%
mutate(avg = mean(HST, na.rm = TRUE))
ssspl <- FootballDB %>% select(Div, Season, Date, AwayTeam, HST) %>%
group_by(Season, Div, AwayTeam) %>%
mutate(avg = mean(HST, na.rm = TRUE))
View(ssspl)
ssspl <- FootballDB %>% select(Div, Season, Date, AwayTeam, HST) %>%
filter(AwayTeam == "Hamburg" | AwayTeam == "Werder Bremen")
group_by(Season, Div, AwayTeam) %>%
mutate(avg = mean(HST, na.rm = TRUE))
FootballDB %>% select(Div, Season, Date, AwayTeam, HST) %>%
filter(AwayTeam == "Hamburg" | AwayTeam == "Werder Bremen")
group_by(Season, Div, AwayTeam) %>%
mutate(avg = mean(HST, na.rm = TRUE))
FootballDB %>% select(Div, Season, Date, AwayTeam, HST) %>%
group_by(Season, Div, AwayTeam) %>%
filter(AwayTeam == "Hamburg" | AwayTeam == "Werder Bremen") %>%
mutate(avg = mean(HST, na.rm = TRUE))
ssspl <- FootballDB %>% select(Div, Season, Date, AwayTeam, HST) %>%
group_by(Season, Div, AwayTeam) %>%
filter(AwayTeam == "Hamburg" | AwayTeam == "Werder Bremen") %>%
mutate(avg = mean(HST, na.rm = TRUE))
testmerge <- merge(x = Computed_Ranking, y = CleanDB[ , c("FTHG", "HTHG", "HS", "HST", "HF", "HC", "HY", "HR")],
by.x = c("Div", "Season", "Date", "Team", "Matchday"),
by.y = c("Div", "Season", "Date", "HomeTeam", "Matchday"), all.x = TRUE)
testmerge <- merge(x = Computed_Ranking, y = CleanDB[ , c("Div", "Season", "Date", "HomeTeam", "Matchday",
"FTHG", "HTHG", "HS", "HST", "HF", "HC", "HY", "HR")],
by.x = c("Div", "Season", "Date", "Team", "Matchday"),
by.y = c("Div", "Season", "Date", "HomeTeam", "Matchday"), all.x = TRUE)
View(testmerge)
testmerge <- testmerge %>% filter(Team == "Hamburg")
testmerge <- merge(x = Computed_Ranking, y = CleanDB[ , c("Div", "Season", "Date", "HomeTeam", "Matchday",
"FTHG", "HTHG", "HS", "HST", "HF", "HC", "HY", "HR")],
by.x = c("Div", "Season", "Date", "Team", "Matchday"),
by.y = c("Div", "Season", "Date", "HomeTeam", "Matchday"), all.x = TRUE)
testmerge <- merge(x = testmerge, y = CleanDB[ , c("Div", "Season", "Date", "AwayTeam", "Matchday",
"FTAG", "HTAG", "AS", "AST", "AF", "AC", "AY", "AR")],
by.x = c("Div", "Season", "Date", "Team", "Matchday"),
by.y = c("Div", "Season", "Date", "AwayTeam", "Matchday"), all.x = TRUE)
testmerge <- testmerge %>% filter(Team == "Hamburg")
View(FootballDB)
teams <- as.character(unique(L1$HomeTeam))
teams <- teams[teams != ""]
Team <- c()
Outcome <- c()
Serie_Draw <- c()
for(t in teams) {
df <- L1 %>% filter(HomeTeam == t | AwayTeam == t)
Result <- c()
serieDraw <- c(0)
print(t)
for (i in 1:nrow(df)) {
if ((df$HomeTeam[i] == t & df$FTR[i] == 'H') | (df$AwayTeam[i] == t & df$FTR[i] == 'A')) {
Result[i] <- 'Win'
} else if ((df$HomeTeam[i] != t & df$FTR[i] == 'H') | (df$AwayTeam[i] != t & df$FTR[i] == 'A')) {
Result[i] <- 'Loss'
} else if (df$FTR[i] == 'D') {
Result[i] <- 'Draw'
}else{
Result[i] <- NA
}
if (Result[i] == 'Win' | Result[i] == 'Loss') {
serieDraw[i+1] <- serieDraw[i] + 1
} else if (Result[i] == 'Draw') {
serieDraw[i+1] <- 0
} else {
serieDraw[i+1] <- NA
}
}
serieDraw <- serieDraw[-length(serieDraw)]
No <- match(t, teams)
print(No)
RepTeam <- rep(sub(" ", "_", t), nrow(df))
Team[[No]] <- RepTeam
Outcome[[No]] <- Result
Serie_Draw[[No]] <- serieDraw
t <- sub(" ", "_", t)
Res <- paste("Result", t, sep = "_")
SD <- paste("serieDraw", t, sep = "_")
assign(Res, Result)
assign(SD, serieDraw)
}
teams <- as.character(unique(CleanDB$HomeTeam))
teams <- teams[teams != ""]
Team <- c()
Outcome <- c()
Serie_Draw <- c()
for(t in teams) {
df <- CleanDB %>% filter(HomeTeam == t | AwayTeam == t)
Result <- c()
serieDraw <- c(0)
print(t)
for (i in 1:nrow(df)) {
if ((df$HomeTeam[i] == t & df$FTR[i] == 'H') | (df$AwayTeam[i] == t & df$FTR[i] == 'A')) {
Result[i] <- 'Win'
} else if ((df$HomeTeam[i] != t & df$FTR[i] == 'H') | (df$AwayTeam[i] != t & df$FTR[i] == 'A')) {
Result[i] <- 'Loss'
} else if (df$FTR[i] == 'D') {
Result[i] <- 'Draw'
}else{
Result[i] <- NA
}
if (Result[i] == 'Win' | Result[i] == 'Loss') {
serieDraw[i+1] <- serieDraw[i] + 1
} else if (Result[i] == 'Draw') {
serieDraw[i+1] <- 0
} else {
serieDraw[i+1] <- NA
}
}
serieDraw <- serieDraw[-length(serieDraw)]
No <- match(t, teams)
print(No)
RepTeam <- rep(sub(" ", "_", t), nrow(df))
Team[[No]] <- RepTeam
Outcome[[No]] <- Result
Serie_Draw[[No]] <- serieDraw
t <- sub(" ", "_", t)
Res <- paste("Result", t, sep = "_")
SD <- paste("serieDraw", t, sep = "_")
assign(Res, Result)
assign(SD, serieDraw)
}
Team <- unlist(Team, recursive = TRUE, use.names = TRUE)
Outcome <- unlist(Outcome, recursive = TRUE, use.names = TRUE)
Serie_Draw <- unlist(Serie_Draw, recursive = TRUE, use.names = TRUE)
Finaldf <- data.frame(cbind(Team, Outcome, Serie_Draw))
View(Finaldf)
teams <- as.character(unique(CleanDB$HomeTeam))
teams <- teams[teams != ""]
Team <- c()
Outcome <- c()
Serie_Draw <- c()
for(t in teams) {
df <- CleanDB %>% filter(HomeTeam == t | AwayTeam == t)
Result <- c()
serieDraw <- c(0)
print(t)
for (i in 1:nrow(df)) {
if ((df$HomeTeam[i] == t & df$FTR[i] == 'H') | (df$AwayTeam[i] == t & df$FTR[i] == 'A')) {
Result[i] <- 'Win'
} else if ((df$HomeTeam[i] != t & df$FTR[i] == 'H') | (df$AwayTeam[i] != t & df$FTR[i] == 'A')) {
Result[i] <- 'Loss'
} else if (df$FTR[i] == 'D') {
Result[i] <- 'Draw'
}else{
Result[i] <- NA
}
if (Result[i] == 'Win' | Result[i] == 'Loss') {
serieDraw[i+1] <- serieDraw[i] + 1
} else if (Result[i] == 'Draw') {
serieDraw[i+1] <- 0
} else {
serieDraw[i+1] <- NA
}
}
serieDraw <- serieDraw[-length(serieDraw)]
No <- match(t, teams)
print(No)
RepTeam <- rep(sub(" ", "_", t), nrow(df))
Team[[No]] <- RepTeam
Outcome[[No]] <- Result
Serie_Draw[[No]] <- serieDraw
t <- sub(" ", "_", t)
Res <- paste("Result", t, sep = "_")
SD <- paste("serieDraw", t, sep = "_")
assign(Res, Result)
assign(SD, serieDraw)
}
Team <- unlist(Team, recursive = TRUE, use.names = TRUE)
Outcome <- unlist(Outcome, recursive = TRUE, use.names = TRUE)
Serie_Draw <- unlist(Serie_Draw, recursive = TRUE, use.names = TRUE)
Finaldf <- data.frame(cbind(Team, Outcome, Serie_Draw))
Finaldf$Team <- as.character(Team)
Finaldf$Outcome <- as.character(Outcome)
Finaldf$Serie_Draw <- as.numeric(Serie_Draw)
FootballDB %>%
group_by(Season, Div, AwayTeam) %>%
mutate(HS_avg = mean(HS, na.rm = TRUE), HST_avg = mean(HST, na.rm = TRUE),
AS_avg = mean(AS, na.rm = TRUE), AST_avg = mean(AST, na.rm = TRUE),
HC_avg = mean(HC, na.rm = TRUE), AC_avg = mean(AC, na.rm = TRUE))
ssspl <- FootballDB %>%
group_by(Season, Div, AwayTeam) %>%
mutate(HS_avg = mean(HS, na.rm = TRUE), HST_avg = mean(HST, na.rm = TRUE),
AS_avg = mean(AS, na.rm = TRUE), AST_avg = mean(AST, na.rm = TRUE),
HC_avg = mean(HC, na.rm = TRUE), AC_avg = mean(AC, na.rm = TRUE))
View(ssspl)
FootballDB <- FootballDB %>%
group_by(Season, Div, HomeTeam) %>%
mutate(HS_avg = mean(HS, na.rm = TRUE), HST_avg = mean(HST, na.rm = TRUE),
HC_avg = mean(HC, na.rm = TRUE))
FootballDB <- FootballDB %>%
group_by(Season, Div, AwayTeam) %>%
mutate(AS_avg = mean(AS, na.rm = TRUE), AST_avg = mean(AST, na.rm = TRUE),
AC_avg = mean(AC, na.rm = TRUE))
View(FootballDB)
FootballDB <- FootballDB %>%
group_by(Season, Div, HomeTeam) %>%
mutate(cum_HS = cumsum(HS))
View(FootballDB)
bibip <- FootballDB %>% filter(HomeTeam == "Hamburg")
View(bibip)
View(FootballDB)
class(FootballDB)
View(Finaldf)
t = "Hamburg"
df <- CleanDB %>% filter(HomeTeam == t | AwayTeam == t)
View(df)
View(df)
